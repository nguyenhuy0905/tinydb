macro(tinydb_add_hardening_flags target visibility)
    # where I got all the flags for GCC and Clang:
    # https://best.openssf.org/Compiler-Hardening-Guides/Compiler-Options-Hardening-Guide-for-C-and-C++.html
    message(STATUS "Adding hardening flags")

    if(MSVC)
        target_compile_definitions(${target} ${visibility} "/DYNAMICBASE;/NXCOMPAT;/CETCOMPAT")
        target_compile_options(${target} ${visibility} "/sdl;/guard:cf;")
    else()
        if(tinydb_ENABLE_DEBUG_OPTIMIZATION)
            # _FORTIFY_SOURCE only works with optimization on
            target_compile_options(${target} ${visibility} "-U_FORTIFY_SOURCE;-D_FORTIFY_SOURCE=3")
        else()
            message(STATUS "D_FORTIFY_SOURCE not enabled, since optimization is required but not turned on.")
        endif()
        target_compile_options(${target} ${visibility} "-fstack-protector;-fstrict-flex-arrays=3;-fstack-clash-protection")
        target_compile_options(${target} ${visibility} "-fno-strict-overflow;-fno-strict-aliasing;-fno-delete-null-pointer-checks")
        target_compile_options(${target} ${visibility} "-Werror=format-security")
        if(tinydb_USE_LIBCXX)
            target_compile_definitions(${target} ${visibility} "-D_GLIBCXX_ASSERTIONS")
        endif()
        include(CheckCXXCompilerFlag)
        # -fcf-protection is for x86
        check_cxx_compiler_flag("-fcf-protection=full" tinydb_FCF_PROTECTION)
        if(tinydb_FCF_PROTECTION)
            target_compile_options(${target} ${visibility} "-fcf-protection=full")
        endif()
        # -mbranch-protection is for Aarch64
        check_cxx_compiler_flag("-mbranch-protection=standard" tinydb_MBR_PROTECTION)
        if(tinydb_MBR_PROTECTION)
            target_compile_options(${target} ${visibility} "-mbranch-protection=standard")
        endif()
        check_cxx_compiler_flag("-Wtrampolines" tinydb_TRAMPOLINES)
        if(tinydb_TRAMPOLINES)
            target_compile_options(${target} ${visibility} "-Wtrampolines")
        endif()
    endif()
endmacro()
