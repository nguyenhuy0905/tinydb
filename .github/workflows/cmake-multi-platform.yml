# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-24.04, macos-15, windows-2022 ]
        build_type: [ Debug ]
        c_compiler: [ gcc-14, llvm-18, apple-clang, msvc ]
        exclude:
          - os: 'windows-2022'
            compiler: gcc-14
          - os: 'windows-2022'
            compiler: llvm-18
          - os: 'windows-2022'
            compiler: apple-clang
          - os: 'ubuntu-24.04'
            compiler: msvc
          - os: 'ubuntu-24.04'
            compiler: apple-clang
          - os: 'macos-15'
            compiler: msvc
          - os: 'macos-15'
            compiler: llvm-18
          - os: 'macos-15'
            compiler: gcc-14

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build/Debug" >> "$GITHUB_OUTPUT"

    - name: Cache
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.conan2
          ${{ env.APPDATA }}/.conan2
          ${{ env.LOCALAPPDATA }}/.conan2
          ~/.cache/ccache
          ~/.ccache
          ~/.config/ccache
          ~/Library/Caches/ccache
          ${{ env.LOCALAPPDATA }}/ccache
          ${{ env.XDG_CACHE_HOME }}/ccache
        key: ${{ runner.os }}-conan-${{ matrix.build_type }}-${{ hashFiles('**/conanfile.py') }}
        restore-keys: |
          ${{ runner.os }}-conan-${{ matrix.build_type }}-

    - name: Setup Cpp
      uses: aminya/setup-cpp@v1
      with:
        compiler: ${{ matrix.compiler }}
        vcvarsall: ${{ contains(matrix.os, 'windows') }}
        cmake: true
        conan: true
        ninja: true

    - name: Setup conan profile
      run: conan profile detect -f

    - name: Conan install
      run: >
        conan install . -s build_type=${{ matrix.build_type }}
        -s compiler.cppstd=23
        -b missing
        -c tools.cmake.cmaketoolchain:generator=Ninja

    - name: CMake setup (Debug)
      run: |
        cmake --preset=debug

    - name: Build
      run: |
        cmake --build build/${{ matrix.build_type }} --config ${{ matrix.build_type }}

    - name: Test
      run: |
        ctest --test-dir build/${{ matrix.build_type }}
